/*
 * OpenWhisk REST API
 * API for OpenWhisk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.EntityBrief;
import io.swagger.client.model.ErrorMessage;
import io.swagger.client.model.ItemId;
import io.swagger.client.model.KeyValue;
import io.swagger.client.model.Trigger;
import io.swagger.client.model.TriggerPut;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TriggersApi
 */
@Ignore
public class TriggersApiTest {

    private final TriggersApi api = new TriggersApi();

    
    /**
     * Delete a trigger
     *
     * Delete a trigger
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTriggerTest() throws ApiException {
        String namespace = null;
        String triggerName = null;
        api.deleteTrigger(namespace, triggerName);

        // TODO: test validations
    }
    
    /**
     * Fire a trigger
     *
     * Fire a trigger
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fireTriggerTest() throws ApiException {
        String namespace = null;
        String triggerName = null;
        KeyValue payload = null;
        ItemId response = api.fireTrigger(namespace, triggerName, payload);

        // TODO: test validations
    }
    
    /**
     * Get all triggers
     *
     * Get all triggers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTriggersTest() throws ApiException {
        String namespace = null;
        Integer limit = null;
        Integer skip = null;
        List<EntityBrief> response = api.getAllTriggers(namespace, limit, skip);

        // TODO: test validations
    }
    
    /**
     * Get trigger information
     *
     * Get trigger information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTriggerByNameTest() throws ApiException {
        String namespace = null;
        String triggerName = null;
        Trigger response = api.getTriggerByName(namespace, triggerName);

        // TODO: test validations
    }
    
    /**
     * Update a trigger
     *
     * Update a trigger
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTriggerTest() throws ApiException {
        String namespace = null;
        String triggerName = null;
        TriggerPut trigger = null;
        String overwrite = null;
        ItemId response = api.updateTrigger(namespace, triggerName, trigger, overwrite);

        // TODO: test validations
    }
    
}

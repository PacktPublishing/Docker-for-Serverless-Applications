---
# Recreates a document in a database.
# dbName - name of the database, where the view should be stored
# doc - the new document for the db

- set_fact:
    create: False
    docWithRev: {}
    document: "{{ doc }}"

# fetches the revision of previous view (to update it) if it exists
- name: check for {{ doc['_id'] }} document in {{ dbName }} database
  uri:
    url: "{{ db_protocol }}://{{ db_host }}:{{ db_port }}/{{ dbName }}/{{ doc['_id'] }}"
    return_content: yes
    method: GET
    status_code: 200, 404
    user: "{{ db_username }}"
    password: "{{ db_password }}"
    force_basic_auth: yes
  register: response

- set_fact:
    existingDoc: "{{ response['content']|from_json }}"
  when: response.status == 200

- name: extract revision from previous document
  vars:
    revision: "{{ existingDoc['_rev'] }}"
  set_fact:
    docWithRev: "{{ doc | combine({'_rev': revision}) }}"
  when: response.status == 200

- name: check if a doc update is required
  set_fact:
    create: True
  when: (response.status == 200 and existingDoc != docWithRev) or response.status == 404 # Create doc, if it did not exist before or if update is required.

- set_fact:
    document: "{{ docWithRev }}"
  when: docWithRev['_id'] is defined and create == True

- name: recreate or update the document on the {{ dbName }} database
  uri:
    url: "{{ db_protocol }}://{{ db_host }}:{{ db_port }}/{{ dbName }}"
    method: POST
    status_code: 200, 201
    body_format: json
    body: "{{ document }}"
    user: "{{ db_username }}"
    password: "{{ db_password }}"
    force_basic_auth: yes
  when: create == True

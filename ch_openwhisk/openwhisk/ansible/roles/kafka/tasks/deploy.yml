---
# This role will install Kafka with Zookeeper in group 'kafka' in the environment inventory

- name: "pull the wurstmeister/kafka:{{ kafka.version }} image"
  shell: "docker pull wurstmeister/kafka:{{ kafka.version }}"
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: (re)start kafka
  vars:
    zookeeper_idx: "{{ groups['kafkas'].index(inventory_hostname) % (groups['zookeepers'] | length) }}"
  docker_container:
    name: kafka{{ groups['kafkas'].index(inventory_hostname) }}
    image: wurstmeister/kafka:{{ kafka.version }}
    state: started
    recreate: true
    restart_policy: "{{ docker.restart.policy }}"
    env:
      "KAFKA_DEFAULT_REPLICATION_FACTOR": "{{ kafka.replicationFactor }}"
      "KAFKA_BROKER_ID": "{{ groups['kafkas'].index(inventory_hostname) }}"
      "KAFKA_ADVERTISED_HOST_NAME": "{{ ansible_host }}"
      "KAFKA_ADVERTISED_PORT": "{{ kafka.port + groups['kafkas'].index(inventory_hostname) }}"
      "KAFKA_HEAP_OPTS": "-Xmx{{ kafka.heap }} -Xms{{ kafka.heap }}"
      "KAFKA_ZOOKEEPER_CONNECT": "{{ zookeeper_connect_string }}"
      "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR": "{{ kafka.replicationFactor }}"
    ports:
      - "{{ kafka.port + groups['kafkas'].index(inventory_hostname) }}:9092"

- name: wait until the kafka server started up
  shell: docker logs kafka{{ groups['kafkas'].index(inventory_hostname) }}
  register: result
  until: (('[Kafka Server ' + (groups['kafkas'].index(inventory_hostname)|string) + '], started') in result.stdout)
  retries: 10
  delay: 5

- name: create the health and the cacheInvalidation topic
  shell: "docker exec kafka0 bash -c 'unset JMX_PORT; kafka-topics.sh --create --topic {{ item.name }} --replication-factor {{ kafka.replicationFactor }} --partitions 1 --zookeeper $KAFKA_ZOOKEEPER_CONNECT --config retention.bytes={{ item.settings.retentionBytes }} --config retention.ms={{ item.settings.retentionMS }} --config segment.bytes={{ item.settings.segmentBytes }}'"
  register: command_result
  failed_when: "not ('Created topic' in command_result.stdout or 'already exists' in command_result.stdout)"
  changed_when: "'Created topic' in command_result.stdout"
  with_items:
  - name: health
    settings: "{{ kafka.topics.health }}"
  - name: cacheInvalidation
    settings: "{{ kafka.topics.cacheInvalidation }}"
  when: groups['kafkas'].index(inventory_hostname ) == 0

---
# This role installs invokers.

- include: docker_login.yml

- name: "pull invoker image with tag {{docker.image.tag}}"
  shell: "docker pull {{docker_registry}}{{item}}:{{docker.image.tag}}"
  with_items:
    - '{{ docker.image.prefix }}/invoker'
  when: docker_registry != ""
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: "pull runtime action images with tag {{docker.image.tag}}"
  shell: "docker pull {{docker_registry}}{{docker.image.prefix}}/{{item}}:{{docker.image.tag}}"
  with_items: "{{ runtimesManifest.runtimes.values() | sum(start=[]) | selectattr('deprecated', 'equalto',false)  | map(attribute='image.name') | list | unique }}"
  when: docker_registry != ""
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: "pull blackboxes action images with tag {{docker.image.tag}}"
  shell: "docker pull {{docker_registry}}{{docker.image.prefix}}/{{item.name}}:{{docker.image.tag}}"
  with_items:
    - "{{ runtimesManifest.blackboxes }}"
  when: docker_registry != ""
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: "determine docker root dir on docker-machine"
  uri:  url="http://{{ ansible_host }}:{{ docker.port }}/info" return_content=yes
  register: dockerInfo_output
  when: whisk_version_name == "mac"

- set_fact:
    dockerInfo: "{{ dockerInfo_output['json'] }}"
  when: whisk_version_name == "mac"

- name: "determine docker root dir"
  shell: echo -e "GET http:/v1.24/info HTTP/1.0\r\n" | nc -U /var/run/docker.sock | grep "{"
  args:
    executable: /bin/bash
  register: dockerInfo_output
  when: whisk_version_name != "mac"

- set_fact:
    dockerInfo: "{{ dockerInfo_output.stdout|from_json }}"
  when: whisk_version_name != "mac"

- name: ensure invoker log directory is created with permissions
  file:
    path: "{{ whisk_logs_dir }}/invoker{{ groups['invokers'].index(inventory_hostname) }}"
    state: directory
    mode: 0777
  become: "{{ logs.dir.become }}"

- name: check, that required databases exist
  include: "{{ openwhisk_home }}/ansible/tasks/db/checkDb.yml"
  vars:
    dbName: "{{ item }}"
  with_items:
  - "{{ db.whisk.actions }}"
  - "{{ db.whisk.activations }}"

- name: define options when deploying invoker on Ubuntu
  set_fact:
    linuxOptions: "-v /usr/lib/x86_64-linux-gnu/libapparmor.so.1:/usr/lib/x86_64-linux-gnu/libapparmor.so.1"
  when: ansible_distribution == "Ubuntu"

- name: get running invoker information
  uri: url="http://{{ ansible_host }}:{{ docker.port }}/containers/json?filters={{ '{"name":[ "invoker" ],"ancestor":[ "invoker" ]}' | urlencode }}" return_content=yes
  register: invokerInfo_output
  when: whisk_version_name == "mac"

- set_fact:
    invokerInfo: "{{ invokerInfo_output['json'] }}"
  when: whisk_version_name == "mac"

- name: "get invoker info"
  shell: |
    INFO=`echo -e "GET http:/v1.24/containers/json?filters={{ '{"name":[ "invoker" ],"ancestor":[ "invoker" ]}' | urlencode }} HTTP/1.0\r\n" | nc -U /var/run/docker.sock | grep "{"`
    if [ -z "$INFO" ]; then
      echo []
    else
      echo $INFO
    fi
  args:
    executable: /bin/bash
  register: invokerInfo_output
  when: whisk_version_name != "mac"

- set_fact:
    invokerInfo: "{{ invokerInfo_output.stdout|from_json }}"
  when: whisk_version_name != "mac"

- name: determine if more than one invoker is running
  fail:
    msg: "more than one invoker is running"
  when: not invoker.allowMultipleInstances and invokerInfo|length > 1

- name: determine if index of invoker is same with index of inventory host
  fail:
    msg: "invoker index is invalid. expected: /invoker{{ groups['invokers'].index(inventory_hostname) }} found: {{ item.Names[0] }}"
  with_items: "{{ invokerInfo }}"
  when: not invoker.allowMultipleInstances and item.Names[0] != "/invoker{{ groups['invokers'].index(inventory_hostname) }}"

- name: start invoker using docker cli
  shell: >
        docker run -d
        --userns=host
        --pid=host
        --privileged
        {{ linuxOptions | default('') }}
        --name invoker{{ groups['invokers'].index(inventory_hostname) }}
        --hostname invoker{{ groups['invokers'].index(inventory_hostname) }}
        --restart {{ docker.restart.policy }}
        -e JAVA_OPTS='-Xmx{{ invoker.heap }} -XX:+CrashOnOutOfMemoryError -XX:+UseGCOverheadLimit -XX:ErrorFile=/logs/java_error.log'
        -e INVOKER_OPTS='{{ invoker.arguments }}'
        -e COMPONENT_NAME='invoker{{ groups['invokers'].index(inventory_hostname) }}'
        -e PORT='8080'
        -e KAFKA_HOSTS='{{ kafka_connect_string }}'
        -e KAFKA_TOPICS_INVOKER_RETENTION_BYTES='{{ kafka.topics.invoker.retentionBytes }}'
        -e KAFKA_TOPICS_INVOKER_RETENTION_MS='{{ kafka.topics.invoker.retentionMS }}'
        -e KAFKA_TOPICS_INVOKER_SEGMENT_BYTES='{{ kafka.topics.invoker.segmentBytes }}'
        -e KAFKA_REPLICATIONFACTOR='{{ kafka.replicationFactor }}'
        -e ZOOKEEPER_HOSTS='{{ zookeeper_connect_string }}'
        -e DB_PROTOCOL='{{ db_protocol }}'
        -e DB_PROVIDER='{{ db_provider }}'
        -e DB_HOST='{{ db_host }}'
        -e DB_PORT='{{ db_port }}'
        -e DB_USERNAME='{{ db_username }}'
        -e DB_PASSWORD='{{ db_password }}'
        -e DB_WHISK_ACTIONS='{{ db.whisk.actions }}'
        -e DB_WHISK_ACTIVATIONS='{{ db.whisk.activations }}'
        -e DB_WHISK_ACTIONS_DDOC='{{ db.whisk.actions_ddoc }}'
        -e DB_WHISK_ACTIVATIONS_DDOC='{{ db.whisk.activations_ddoc }}'
        -e DB_WHISK_ACTIVATIONS_FILTER_DDOC='{{ db.whisk.activations_filter_ddoc }}'
        -e WHISK_API_HOST_PROTO='{{ whisk_api_host_proto | default('https') }}'
        -e WHISK_API_HOST_PORT='{{ whisk_api_host_port | default('443') }}'
        -e WHISK_API_HOST_NAME='{{ whisk_api_host_name | default(groups['edge'] | first) }}'
        -e RUNTIMES_MANIFEST='{{ runtimesManifest | to_json }}'
        -e DOCKER_REGISTRY='{{ docker_registry }}'
        -e DOCKER_IMAGE_PREFIX='{{ docker.image.prefix }}'
        -e DOCKER_IMAGE_TAG='{{ docker.image.tag }}'
        -e INVOKER_CONTAINER_NETWORK='{{ invoker_container_network_name | default("bridge") }}'
        -e INVOKER_CONTAINER_POLICY='{{ invoker_container_policy_name | default()}}'
        -e INVOKER_CONTAINER_DNS='{{ invoker_container_network_dns_servers | default()}}'
        -e INVOKER_NUMCORE='{{ invoker.numcore }}'
        -e INVOKER_CORESHARE='{{ invoker.coreshare }}'
        -e INVOKER_USE_RUNC='{{ invoker.useRunc }}'
        -e INVOKER_NAME='{{ groups['invokers'].index(inventory_hostname) }}'
        -e WHISK_LOGS_DIR='{{ whisk_logs_dir }}'
        -e METRICS_KAMON='{{ metrics.kamon.enabled }}'
        -e METRICS_LOG='{{ metrics.log.enabled }}'
        -e CONFIG_kamon_statsd_hostname='{{ metrics.kamon.host }}'
        -e CONFIG_kamon_statsd_port='{{ metrics.kamon.port }}'
        -v /sys/fs/cgroup:/sys/fs/cgroup
        -v /run/runc:/run/runc
        -v {{ whisk_logs_dir }}/invoker{{ groups['invokers'].index(inventory_hostname) }}:/logs
        -v {{ dockerInfo["DockerRootDir"] }}/containers/:/containers
        -v {{ docker_sock | default('/var/run/docker.sock') }}:/var/run/docker.sock
        -p {{ invoker.port + groups['invokers'].index(inventory_hostname) }}:8080
        {{ docker_registry }}{{ docker.image.prefix }}/invoker:{{ docker.image.tag }}
        /bin/sh -c "exec /init.sh {{ groups['invokers'].index(inventory_hostname) }} >> /logs/invoker{{ groups['invokers'].index(inventory_hostname) }}_logs.log 2>&1"

# todo: re-enable docker_container module once https://github.com/ansible/ansible-modules-core/issues/5054 is resolved

- name: wait until Invoker is up and running
  uri:
    url: "http://{{ ansible_host }}:{{ invoker.port + groups['invokers'].index(inventory_hostname) }}/ping"
  register: result
  until: result.status == 200
  retries: 12
  delay: 5

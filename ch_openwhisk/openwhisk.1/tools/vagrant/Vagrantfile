
# -*- mode: ruby -*-
# vi: set ft=ruby :

# Custom OpenWhisk

# vagrant resume issue https://github.com/mitchellh/vagrant/issues/6787
# Don't use vagrant resume, it will run the provisioning a second producing errors
# Use vagrant suspend and vagrant up (using up it skips provisioning)

BOX = "ubuntu/trusty64"
BOX_MEMORY = ENV['BOX_MEMORY'] || '4096'
BOX_CPUS = ENV['BOX_CPUS'] || '4'
MACHINE_IP = ENV['MACHINE_IP'] || '192.168.33.13'
OW_DB = if ENV['OW_DB'] =~ (/^(cloudant|couchdb)$/i) then true else false end

Vagrant.configure('2') do |config|
  config.vm.box = BOX
  config.vm.network :private_network, ip: MACHINE_IP

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  config.ssh.forward_agent = true

  config.vm.provider :virtualbox do |vb|
    vb.name = "whisk-" + Time.now.strftime("%y%m%d%H%M")
    vb.gui = ENV['gui'] || false
    vb.cpus = BOX_CPUS
    vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
    vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
    vb.customize ['modifyvm', :id, '--ostype', 'Ubuntu_64']
    vb.customize ['modifyvm', :id, '--memory', BOX_MEMORY]
  end

  # Shared root of repository; do not use symlinks
  config.vm.synced_folder '../../', '/home/vagrant/openwhisk'

  # Prevents "stdin: is not a tty" on Ubuntu (https://github.com/mitchellh/vagrant/issues/1673)
  config.vm.provision "fix-no-tty", type: "shell" do |s|
    s.privileged = false
    s.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
  end

  # Install Software
$script_common = <<SCRIPT
  set -e
  set -x
  echo "`date`: ubuntu-setup-start" >> /tmp/vagrant-times.txt
  sudo add-apt-repository ppa:git-core/ppa
  sudo apt-get update
  sudo apt-get install git -y
  sudo apt-get install htop

  # Configure swapfile
  echo 'swapfile not found. Adding swapfile.'
  fallocate -l 8000M /swapfile
  chmod 600 /swapfile
  mkswap /swapfile
  swapon /swapfile
  echo '/swapfile none swap defaults 0 0' >> /etc/fstab

  HOME=/home/vagrant
  OPENWHISK_HOME=${HOME}/openwhisk
  ANSIBLE_HOME=${OPENWHISK_HOME}/ansible
  ANSIBLE_REMOTE_TEMP=${ANSIBLE_HOME}/tmp
  # Add Global environments variables
  # Set remote tmp dir for ansible to fix shared folder problems on Windows
  echo ANSIBLE_HOME=${ANSIBLE_HOME} >> /etc/environment
  echo ANSIBLE_REMOTE_TEMP=${ANSIBLE_REMOTE_TEMP} >> /etc/environment
  echo OPENWHISK_HOME=${OPENWHISK_HOME} >> /etc/environment
  echo PATH=${PATH}:${HOME}/bin:${OPENWHISK_HOME}/tools/build >> /etc/environment

  cd /home/vagrant/openwhisk
  cd tools/ubuntu-setup
  su vagrant -c 'source all.sh'
  echo "`date`: ubuntu-setup-end" >> /tmp/vagrant-times.txt
SCRIPT

  config.vm.provision "script_common", type: "shell", keep_color: true, inline: $script_common

  # Configure Custom Database
$script_db = <<SCRIPT
export ANSIBLE_REMOTE_TEMP=/home/vagrant/openwhisk/ansible/tmp
export OW_DB=#{ENV['OW_DB']}
export OW_DB_USERNAME=#{ENV['OW_DB_USERNAME']}
export OW_DB_PASSWORD=#{ENV['OW_DB_PASSWORD']}
if [[ $OW_DB == "cloudant" ]]; then
  export OW_DB="Cloudant"
  export OW_DB_PROTOCOL="https"
  export OW_DB_HOST="$OW_DB_USERNAME.cloudant.com"
  export OW_DB_PORT="443"
else
  export OW_DB="CouchDB"
  export OW_DB_PROTOCOL=#{ENV['OW_DB_PROTOCOL']}
  export OW_DB_HOST=#{ENV['OW_DB_HOST']}
  export OW_DB_PORT=#{ENV['OW_DB_PORT']}
fi

cd /home/vagrant/openwhisk/ansible
su vagrant -c 'ansible-playbook -i environments/local setup.yml'
su vagrant -c 'ansible-playbook -i environments/local prereq.yml'
SCRIPT

  # Configure Default CouchDB
$couch_db = <<COUCH_DB
echo "`date`: couchdb-setup-start" >> /tmp/vagrant-times.txt
export ANSIBLE_REMOTE_TEMP=/home/vagrant/openwhisk/ansible/tmp
cd /home/vagrant/openwhisk/ansible
su vagrant -c 'ansible-playbook -i environments/local setup.yml'
su vagrant -c 'ansible-playbook -i environments/local prereq.yml'
su vagrant -c 'ansible-playbook -i environments/local couchdb.yml'
echo "`date`: couchdb-setup-end" >> /tmp/vagrant-times.txt
COUCH_DB

$init_db = <<INIT_DB
export ANSIBLE_REMOTE_TEMP=/home/vagrant/openwhisk/ansible/tmp
cd /home/vagrant/openwhisk/ansible
su vagrant -c 'ansible-playbook -i environments/local initdb.yml'
INIT_DB

  if OW_DB
    config.vm.provision "script_db", type: "shell", keep_color: true, inline: $script_db
  else
    config.vm.provision "start_couch", type: "shell", keep_color: true, inline: $couch_db
  end
  config.vm.provision "initdb", type: "shell", keep_color: true, inline: $init_db

  # Build and Deploy
$script_end = <<SCRIPT
  set -e
  set -x
  echo "`date`: build-start" >> /tmp/vagrant-times.txt
  HOME=/home/vagrant
  source /etc/environment
  # Build OpenWhisk using gradle
  cd ${OPENWHISK_HOME}
  su vagrant -c './gradlew  tools:cli:distDocker -PdockerImagePrefix=openwhisk'

  echo "`date`: deploy-start" >> /tmp/vagrant-times.txt
  # Deploy OpenWhisk using ansible
  cd ${ANSIBLE_HOME}
  su vagrant -c 'ansible-playbook -i environments/local wipe.yml'
  su vagrant -c 'ansible-playbook -i environments/local apigateway.yml'
  su vagrant -c 'ansible-playbook -i environments/local -e docker_image_prefix=openwhisk openwhisk.yml'
  su vagrant -c 'ansible-playbook -i environments/local postdeploy.yml'

  # Setup OpenWhisk CLI
  su vagrant -c 'mkdir ${HOME}/bin'
  su vagrant -c 'ln -s ${OPENWHISK_HOME}/tools/admin/wskadmin ${HOME}/bin/wskadmin'
  su vagrant -c 'ln -s ${OPENWHISK_HOME}/tools/build/redo ${HOME}/bin/wskdev'
  echo ${OPENWHISK_HOME}/bin/linux/amd64/wsk -i '"$@"' > ${HOME}/bin/wsk
  chmod +x ${HOME}/bin/wsk
  chown vagrant:vagrant ${HOME}/bin/wsk
  PATH=${PATH}:${HOME}/bin
  echo 'eval "`wsk sdk install bashauto --stdout`"'>>${HOME}/.bashrc

  # Run OpenWhisk CLI
  touch $HOME/.wskprops
  chown -R vagrant:vagrant $HOME
  # This allows user to see how to configure the wsk cli outside the VM
  wsk property set --apihost ${WHISK_IP} --namespace guest --auth `cat ${ANSIBLE_HOME}/files/auth.guest`
  wsk action invoke /whisk.system/utils/echo -p message hello --result
  echo "`date`: build-deploy-end" >> /tmp/vagrant-times.txt
SCRIPT

  config.vm.provision "script_end", type: "shell", keep_color: true, inline: $script_end, env: {"WHISK_IP" => MACHINE_IP}

  if ENV['gui'] == 'true'
    # Install ubuntu-desktop and virtualbox additions
    config.vm.provision "shell", keep_color: true, inline: "apt-get update"
    config.vm.provision "shell", keep_color: true, inline: "apt-get install -y virtualbox-guest-dkms"
    config.vm.provision "shell", keep_color: true, inline: "apt-get install -y virtualbox-guest-utils"
    config.vm.provision "shell", keep_color: true, inline: "apt-get install -y virtualbox-guest-x11"
    config.vm.provision "shell", keep_color: true, inline: "sed -i 's/allowed_users=.*$/allowed_users=anybody/' /etc/X11/Xwrapper.config"
    #the ; true is used to ignore errors from ubuntu-desktop, vagrant reload should be done after provisioning
    config.vm.provision "shell", keep_color: true, inline: "sudo sh -c 'apt-get install -y ubuntu-desktop ; true'"
  end

end

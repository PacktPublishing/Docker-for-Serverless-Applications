/*
 * OpenWhisk REST API
 * API for OpenWhisk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.EntityBrief;
import io.swagger.client.model.ErrorMessage;
import io.swagger.client.model.ItemId;
import io.swagger.client.model.Rule;
import io.swagger.client.model.RulePut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RulesApi {
    private ApiClient apiClient;

    public RulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RulesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteRule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRuleCall(String namespace, String ruleName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/rules/{ruleName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "ruleName" + "\\}", apiClient.escapeString(ruleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRuleValidateBeforeCall(String namespace, String ruleName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling deleteRule(Async)");
        }
        
        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling deleteRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteRuleCall(namespace, ruleName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a rule
     * Delete a rule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRule(String namespace, String ruleName) throws ApiException {
        deleteRuleWithHttpInfo(namespace, ruleName);
    }

    /**
     * Delete a rule
     * Delete a rule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRuleWithHttpInfo(String namespace, String ruleName) throws ApiException {
        com.squareup.okhttp.Call call = deleteRuleValidateBeforeCall(namespace, ruleName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a rule (asynchronously)
     * Delete a rule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRuleAsync(String namespace, String ruleName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRuleValidateBeforeCall(namespace, ruleName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllRules
     * @param namespace The entity namespace (required)
     * @param limit Number of entities to include in the result. (optional)
     * @param skip Number of entities to skip in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllRulesCall(String namespace, Integer limit, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/rules"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllRulesValidateBeforeCall(String namespace, Integer limit, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getAllRules(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllRulesCall(namespace, limit, skip, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all rules
     * Get all rules
     * @param namespace The entity namespace (required)
     * @param limit Number of entities to include in the result. (optional)
     * @param skip Number of entities to skip in the result. (optional)
     * @return List&lt;EntityBrief&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EntityBrief> getAllRules(String namespace, Integer limit, Integer skip) throws ApiException {
        ApiResponse<List<EntityBrief>> resp = getAllRulesWithHttpInfo(namespace, limit, skip);
        return resp.getData();
    }

    /**
     * Get all rules
     * Get all rules
     * @param namespace The entity namespace (required)
     * @param limit Number of entities to include in the result. (optional)
     * @param skip Number of entities to skip in the result. (optional)
     * @return ApiResponse&lt;List&lt;EntityBrief&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EntityBrief>> getAllRulesWithHttpInfo(String namespace, Integer limit, Integer skip) throws ApiException {
        com.squareup.okhttp.Call call = getAllRulesValidateBeforeCall(namespace, limit, skip, null, null);
        Type localVarReturnType = new TypeToken<List<EntityBrief>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all rules (asynchronously)
     * Get all rules
     * @param namespace The entity namespace (required)
     * @param limit Number of entities to include in the result. (optional)
     * @param skip Number of entities to skip in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllRulesAsync(String namespace, Integer limit, Integer skip, final ApiCallback<List<EntityBrief>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllRulesValidateBeforeCall(namespace, limit, skip, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EntityBrief>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRuleByName
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to fetch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRuleByNameCall(String namespace, String ruleName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/rules/{ruleName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "ruleName" + "\\}", apiClient.escapeString(ruleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRuleByNameValidateBeforeCall(String namespace, String ruleName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getRuleByName(Async)");
        }
        
        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling getRuleByName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRuleByNameCall(namespace, ruleName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get rule information
     * Get rule information
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to fetch (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Rule getRuleByName(String namespace, String ruleName) throws ApiException {
        ApiResponse<Rule> resp = getRuleByNameWithHttpInfo(namespace, ruleName);
        return resp.getData();
    }

    /**
     * Get rule information
     * Get rule information
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to fetch (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Rule> getRuleByNameWithHttpInfo(String namespace, String ruleName) throws ApiException {
        com.squareup.okhttp.Call call = getRuleByNameValidateBeforeCall(namespace, ruleName, null, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get rule information (asynchronously)
     * Get rule information
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRuleByNameAsync(String namespace, String ruleName, final ApiCallback<Rule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRuleByNameValidateBeforeCall(namespace, ruleName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setState
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to update (required)
     * @param state Set state to enable or disable (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setStateCall(String namespace, String ruleName, String state, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/rules/{ruleName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "ruleName" + "\\}", apiClient.escapeString(ruleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setStateValidateBeforeCall(String namespace, String ruleName, String state, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling setState(Async)");
        }
        
        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling setState(Async)");
        }
        
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling setState(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setStateCall(namespace, ruleName, state, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable or disable a rule
     * Enable or disable a rule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to update (required)
     * @param state Set state to enable or disable (required)
     * @return ItemId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemId setState(String namespace, String ruleName, String state) throws ApiException {
        ApiResponse<ItemId> resp = setStateWithHttpInfo(namespace, ruleName, state);
        return resp.getData();
    }

    /**
     * Enable or disable a rule
     * Enable or disable a rule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to update (required)
     * @param state Set state to enable or disable (required)
     * @return ApiResponse&lt;ItemId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemId> setStateWithHttpInfo(String namespace, String ruleName, String state) throws ApiException {
        com.squareup.okhttp.Call call = setStateValidateBeforeCall(namespace, ruleName, state, null, null);
        Type localVarReturnType = new TypeToken<ItemId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable or disable a rule (asynchronously)
     * Enable or disable a rule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to update (required)
     * @param state Set state to enable or disable (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setStateAsync(String namespace, String ruleName, String state, final ApiCallback<ItemId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setStateValidateBeforeCall(namespace, ruleName, state, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to update (required)
     * @param rule The rule being updated (required)
     * @param overwrite Overwrite item if it exists. Default is false. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRuleCall(String namespace, String ruleName, RulePut rule, String overwrite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = rule;
        
        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/rules/{ruleName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "ruleName" + "\\}", apiClient.escapeString(ruleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (overwrite != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "overwrite", overwrite));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRuleValidateBeforeCall(String namespace, String ruleName, RulePut rule, String overwrite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling updateRule(Async)");
        }
        
        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling updateRule(Async)");
        }
        
        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling updateRule(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateRuleCall(namespace, ruleName, rule, overwrite, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a rule
     * Update a rule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to update (required)
     * @param rule The rule being updated (required)
     * @param overwrite Overwrite item if it exists. Default is false. (optional)
     * @return ItemId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemId updateRule(String namespace, String ruleName, RulePut rule, String overwrite) throws ApiException {
        ApiResponse<ItemId> resp = updateRuleWithHttpInfo(namespace, ruleName, rule, overwrite);
        return resp.getData();
    }

    /**
     * Update a rule
     * Update a rule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to update (required)
     * @param rule The rule being updated (required)
     * @param overwrite Overwrite item if it exists. Default is false. (optional)
     * @return ApiResponse&lt;ItemId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemId> updateRuleWithHttpInfo(String namespace, String ruleName, RulePut rule, String overwrite) throws ApiException {
        com.squareup.okhttp.Call call = updateRuleValidateBeforeCall(namespace, ruleName, rule, overwrite, null, null);
        Type localVarReturnType = new TypeToken<ItemId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a rule (asynchronously)
     * Update a rule
     * @param namespace The entity namespace (required)
     * @param ruleName Name of rule to update (required)
     * @param rule The rule being updated (required)
     * @param overwrite Overwrite item if it exists. Default is false. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRuleAsync(String namespace, String ruleName, RulePut rule, String overwrite, final ApiCallback<ItemId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRuleValidateBeforeCall(namespace, ruleName, rule, overwrite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * OpenWhisk REST API
 * API for OpenWhisk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * definition of the action, such as javascript code or the name of a container
 */
@ApiModel(description = "definition of the action, such as javascript code or the name of a container")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-28T00:15:16.400+07:00")
public class ActionExec {
  /**
   * the type of action
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    NODEJS_6("nodejs:6"),
    
    NODEJS_8("nodejs:8"),
    
    PYTHON_2("python:2"),
    
    PYTHON_3("python:3"),
    
    SWIFT_3("swift:3"),
    
    SWIFT_3_1_1("swift:3.1.1"),
    
    JAVA("java"),
    
    BLACKBOX("blackbox");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String text) {
      for (KindEnum b : KindEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return KindEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("kind")
  private KindEnum kind = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("init")
  private String init = null;

  public ActionExec kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

   /**
   * the type of action
   * @return kind
  **/
  @ApiModelProperty(required = true, value = "the type of action")
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }

  public ActionExec code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The code to execute when kind is not &#39;blackbox&#39;
   * @return code
  **/
  @ApiModelProperty(value = "The code to execute when kind is not 'blackbox'")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public ActionExec image(String image) {
    this.image = image;
    return this;
  }

   /**
   * container image name when kind is &#39;blackbox&#39;
   * @return image
  **/
  @ApiModelProperty(value = "container image name when kind is 'blackbox'")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public ActionExec init(String init) {
    this.init = init;
    return this;
  }

   /**
   * optional zipfile reference when code kind is &#39;nodejs&#39;
   * @return init
  **/
  @ApiModelProperty(value = "optional zipfile reference when code kind is 'nodejs'")
  public String getInit() {
    return init;
  }

  public void setInit(String init) {
    this.init = init;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionExec actionExec = (ActionExec) o;
    return Objects.equals(this.kind, actionExec.kind) &&
        Objects.equals(this.code, actionExec.code) &&
        Objects.equals(this.image, actionExec.image) &&
        Objects.equals(this.init, actionExec.init);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kind, code, image, init);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionExec {\n");
    
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    init: ").append(toIndentedString(init)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}


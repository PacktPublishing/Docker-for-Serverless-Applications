/*
 * OpenWhisk REST API
 * API for OpenWhisk
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.EntityBrief;
import io.swagger.client.model.ErrorMessage;
import io.swagger.client.model.ItemId;
import io.swagger.client.model.KeyValue;
import io.swagger.client.model.Trigger;
import io.swagger.client.model.TriggerPut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TriggersApi {
    private ApiClient apiClient;

    public TriggersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TriggersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteTrigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTriggerCall(String namespace, String triggerName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/triggers/{triggerName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "triggerName" + "\\}", apiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTriggerValidateBeforeCall(String namespace, String triggerName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling deleteTrigger(Async)");
        }
        
        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling deleteTrigger(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTriggerCall(namespace, triggerName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a trigger
     * Delete a trigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTrigger(String namespace, String triggerName) throws ApiException {
        deleteTriggerWithHttpInfo(namespace, triggerName);
    }

    /**
     * Delete a trigger
     * Delete a trigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTriggerWithHttpInfo(String namespace, String triggerName) throws ApiException {
        com.squareup.okhttp.Call call = deleteTriggerValidateBeforeCall(namespace, triggerName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a trigger (asynchronously)
     * Delete a trigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTriggerAsync(String namespace, String triggerName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTriggerValidateBeforeCall(namespace, triggerName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for fireTrigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger being fired (required)
     * @param payload The trigger payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fireTriggerCall(String namespace, String triggerName, KeyValue payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;
        
        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/triggers/{triggerName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "triggerName" + "\\}", apiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fireTriggerValidateBeforeCall(String namespace, String triggerName, KeyValue payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling fireTrigger(Async)");
        }
        
        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling fireTrigger(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling fireTrigger(Async)");
        }
        
        
        com.squareup.okhttp.Call call = fireTriggerCall(namespace, triggerName, payload, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fire a trigger
     * Fire a trigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger being fired (required)
     * @param payload The trigger payload (required)
     * @return ItemId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemId fireTrigger(String namespace, String triggerName, KeyValue payload) throws ApiException {
        ApiResponse<ItemId> resp = fireTriggerWithHttpInfo(namespace, triggerName, payload);
        return resp.getData();
    }

    /**
     * Fire a trigger
     * Fire a trigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger being fired (required)
     * @param payload The trigger payload (required)
     * @return ApiResponse&lt;ItemId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemId> fireTriggerWithHttpInfo(String namespace, String triggerName, KeyValue payload) throws ApiException {
        com.squareup.okhttp.Call call = fireTriggerValidateBeforeCall(namespace, triggerName, payload, null, null);
        Type localVarReturnType = new TypeToken<ItemId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fire a trigger (asynchronously)
     * Fire a trigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger being fired (required)
     * @param payload The trigger payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fireTriggerAsync(String namespace, String triggerName, KeyValue payload, final ApiCallback<ItemId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fireTriggerValidateBeforeCall(namespace, triggerName, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllTriggers
     * @param namespace The entity namespace (required)
     * @param limit Number of entities to include in the result. (optional)
     * @param skip Number of entities to skip in the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllTriggersCall(String namespace, Integer limit, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/triggers"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skip", skip));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllTriggersValidateBeforeCall(String namespace, Integer limit, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getAllTriggers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllTriggersCall(namespace, limit, skip, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all triggers
     * Get all triggers
     * @param namespace The entity namespace (required)
     * @param limit Number of entities to include in the result. (optional)
     * @param skip Number of entities to skip in the result. (optional)
     * @return List&lt;EntityBrief&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EntityBrief> getAllTriggers(String namespace, Integer limit, Integer skip) throws ApiException {
        ApiResponse<List<EntityBrief>> resp = getAllTriggersWithHttpInfo(namespace, limit, skip);
        return resp.getData();
    }

    /**
     * Get all triggers
     * Get all triggers
     * @param namespace The entity namespace (required)
     * @param limit Number of entities to include in the result. (optional)
     * @param skip Number of entities to skip in the result. (optional)
     * @return ApiResponse&lt;List&lt;EntityBrief&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EntityBrief>> getAllTriggersWithHttpInfo(String namespace, Integer limit, Integer skip) throws ApiException {
        com.squareup.okhttp.Call call = getAllTriggersValidateBeforeCall(namespace, limit, skip, null, null);
        Type localVarReturnType = new TypeToken<List<EntityBrief>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all triggers (asynchronously)
     * Get all triggers
     * @param namespace The entity namespace (required)
     * @param limit Number of entities to include in the result. (optional)
     * @param skip Number of entities to skip in the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTriggersAsync(String namespace, Integer limit, Integer skip, final ApiCallback<List<EntityBrief>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTriggersValidateBeforeCall(namespace, limit, skip, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EntityBrief>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTriggerByName
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to fetch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTriggerByNameCall(String namespace, String triggerName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/triggers/{triggerName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "triggerName" + "\\}", apiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTriggerByNameValidateBeforeCall(String namespace, String triggerName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getTriggerByName(Async)");
        }
        
        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling getTriggerByName(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTriggerByNameCall(namespace, triggerName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get trigger information
     * Get trigger information
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to fetch (required)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Trigger getTriggerByName(String namespace, String triggerName) throws ApiException {
        ApiResponse<Trigger> resp = getTriggerByNameWithHttpInfo(namespace, triggerName);
        return resp.getData();
    }

    /**
     * Get trigger information
     * Get trigger information
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to fetch (required)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Trigger> getTriggerByNameWithHttpInfo(String namespace, String triggerName) throws ApiException {
        com.squareup.okhttp.Call call = getTriggerByNameValidateBeforeCall(namespace, triggerName, null, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get trigger information (asynchronously)
     * Get trigger information
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTriggerByNameAsync(String namespace, String triggerName, final ApiCallback<Trigger> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTriggerByNameValidateBeforeCall(namespace, triggerName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTrigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to update (required)
     * @param trigger The trigger being updated (required)
     * @param overwrite Overwrite item if it exists. Default is false. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTriggerCall(String namespace, String triggerName, TriggerPut trigger, String overwrite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = trigger;
        
        // create path and map variables
        String localVarPath = "/namespaces/{namespace}/triggers/{triggerName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "triggerName" + "\\}", apiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (overwrite != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "overwrite", overwrite));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTriggerValidateBeforeCall(String namespace, String triggerName, TriggerPut trigger, String overwrite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling updateTrigger(Async)");
        }
        
        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling updateTrigger(Async)");
        }
        
        // verify the required parameter 'trigger' is set
        if (trigger == null) {
            throw new ApiException("Missing the required parameter 'trigger' when calling updateTrigger(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTriggerCall(namespace, triggerName, trigger, overwrite, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a trigger
     * Update a trigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to update (required)
     * @param trigger The trigger being updated (required)
     * @param overwrite Overwrite item if it exists. Default is false. (optional)
     * @return ItemId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemId updateTrigger(String namespace, String triggerName, TriggerPut trigger, String overwrite) throws ApiException {
        ApiResponse<ItemId> resp = updateTriggerWithHttpInfo(namespace, triggerName, trigger, overwrite);
        return resp.getData();
    }

    /**
     * Update a trigger
     * Update a trigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to update (required)
     * @param trigger The trigger being updated (required)
     * @param overwrite Overwrite item if it exists. Default is false. (optional)
     * @return ApiResponse&lt;ItemId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemId> updateTriggerWithHttpInfo(String namespace, String triggerName, TriggerPut trigger, String overwrite) throws ApiException {
        com.squareup.okhttp.Call call = updateTriggerValidateBeforeCall(namespace, triggerName, trigger, overwrite, null, null);
        Type localVarReturnType = new TypeToken<ItemId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a trigger (asynchronously)
     * Update a trigger
     * @param namespace The entity namespace (required)
     * @param triggerName Name of trigger to update (required)
     * @param trigger The trigger being updated (required)
     * @param overwrite Overwrite item if it exists. Default is false. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTriggerAsync(String namespace, String triggerName, TriggerPut trigger, String overwrite, final ApiCallback<ItemId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTriggerValidateBeforeCall(namespace, triggerName, trigger, overwrite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

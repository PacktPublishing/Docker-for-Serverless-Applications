#!/usr/bin/env gorun

package main

import (
	"context"
	"fmt"

	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/filters"
	"github.com/docker/docker/client"
)

func main() {
	ctx := context.Background()

	cli, err := client.NewClient(client.DefaultDockerHost, "1.30", nil, nil)
	if err != nil {
		panic(err)
	}

	filter := filters.NewArgs(filters.Arg("type", "node"))
	ch, _ := cli.Events(ctx, types.EventsOptions{
		Filters: filter,
	})

	for {

		fmt.Println("Waiting for event ...")
		message := <-ch
		action := message.Action

		switch action {
		case "create":
			fmt.Println(" - New node added.")
		case "update":
			fmt.Println(" - Node updated.")
		case "remove":
			fmt.Println(" - Node removed.")
		}

	}

}

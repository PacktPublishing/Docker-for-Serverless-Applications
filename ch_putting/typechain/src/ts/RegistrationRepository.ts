/* GENERATED BY TYPECHAIN VER. 0.1.2 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class RegistrationRepository extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "telNo", type: "string" }],
        name: "findByTelNo",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "telNo", type: "string" },
          { name: "bank", type: "string" },
          { name: "accNo", type: "string" }
        ],
        name: "register",
        outputs: [],
        payable: false,
        type: "function"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "telNo", type: "string" },
          { indexed: false, name: "registration", type: "address" }
        ],
        name: "Registered",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "telNo", type: "string" },
          { indexed: false, name: "bank", type: "string" },
          { indexed: false, name: "accNo", type: "string" }
        ],
        name: "RegistrationFound",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: "telNo", type: "string" }],
        name: "AlreadyExisted",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<RegistrationRepository> {
    const contract = new RegistrationRepository(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public findByTelNoTx(telNo: string): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "findByTelNo", [
      telNo.toString()
    ]);
  }
  public registerTx(
    telNo: string,
    bank: string,
    accNo: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "register", [
      telNo.toString(),
      bank.toString(),
      accNo.toString()
    ]);
  }
}

/* GENERATED BY TYPECHAIN VER. 0.1.2 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class Migrations extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "new_address", type: "address" }],
        name: "upgrade",
        outputs: [],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "last_completed_migration",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "completed", type: "uint256" }],
        name: "setCompleted",
        outputs: [],
        payable: false,
        type: "function"
      },
      { inputs: [], payable: false, type: "constructor" }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Migrations> {
    const contract = new Migrations(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get last_completed_migration(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.last_completed_migration, []);
  }
  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, []);
  }

  public upgradeTx(
    new_address: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "upgrade", [
      new_address.toString()
    ]);
  }
  public setCompletedTx(
    completed: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setCompleted", [
      completed.toString()
    ]);
  }
}
